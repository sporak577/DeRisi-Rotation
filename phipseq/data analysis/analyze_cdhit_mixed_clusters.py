"""
This script checks for strain or protein-level mixing in clusters generated by CD-HIT

Input: 
- load FASTA file of peptide tiles used as input to CD-HIT
- A .clstr file procuded by CD-HIT

Output: 
- A CSV file reporting cluster type (same protein, same strain, or mixed strains) along with associated metadata for each tile 
"""

import re 
from collections import defaultdict 
import csv
from Bio import SeqIO

# ----- Required Inputs -----
date = "050825"
fasta_file = "/Users/sophieporak/Library/CloudStorage/Box-Box/DeRisi/FINAL LIBRARY ORDERED/files used/0.94_tiling_out_aa_preprocess_tiles.fasta"
clstr_file = '/Users/sophieporak/Library/CloudStorage/Box-Box/DeRisi/FINAL LIBRARY ORDERED/files used/cd-hit_0.96_0.94_aa_tiles.fasta.clstr'
output_file = f"/Users/sophieporak/Desktop/clusters_with_mixed_strains_{date}.csv"

# ----- STEP 1: PARSE METADATA FROM FASTA HEADERS   
tile_to_metadata = {}

for record in SeqIO.parse(fasta_file, "fasta"):
    tile_id = record.id #e.g.WFG38034.1_1 from  >WFG38034.1_1 WFG38034.1 glycoprotein precursor|Aba-Mianyang virus|SC/C3-30.18/2021|Ochotona sp.|China|Aug-2021|S|?| | tile 1 of 23

    #Description: WFG38034.1 glycoprotein precursor|Aba-Mianyang virus|SC/C3-30.18/2021|Ochotona sp.|China|Aug-2021|S|?| | tile 1 of 23
    desc = record.description
    parts = desc.split("|")
    
    try: 
        id_and_name = parts[0].split()
        accession = id_and_name[0]
        protein_name = " ".join(id_and_name[1:]) #glycoprotein precursor 
        strain = parts[1].strip()
        isolate = parts[2].strip()
        host = parts[3].strip()
        country = parts[4].strip()
        collection_date = parts[5].strip()

        """
        r".." a raw string, so backlashes aren't treated as escape characters
        tile: matches the literal word tile (case sensitive)
        \s+ matches one or more spaces or tabs
        (\d+) matches and captures one or more digits (i.e. the tile number)
        """
        tile_match = re.search(r"tile\s+(\d+)", desc, re.IGNORECASE)
        tile_number = int(tile_match.group(1)) if tile_match else None

    except IndexError:
        print(f"Skipping malformed header: {desc}")
        continue 

    tile_to_metadata[tile_id] = {
        "accession": accession, 
        "strain": strain, 
        "host": host,
        "country": country,
        "collection_date": collection_date,
        "tile_number": tile_number,
        "protein_name": protein_name
    }

# ------ STEP2: PARSE CD-HIT .clstr file ------
clusters = []
current_cluster = []

with open(clstr_file) as f:
    for line in f: 
        line = line.strip()
        if line.startswith(">Cluster"):
            if current_cluster: #checks if the list is non-empty, e.g. if current_cluster contains any elements do something. 
                clusters.append(current_cluster)
                current_cluster = []
        else:
            """
            (.*?) . matches any character (except newlines), * means "zero or more times", ? makes it non greedy - stops as soon as possible
            so this captures everything between > and ...
            \.\.\. matches a literal ... (each . must be escaped with \ in regex)
            """
            match = re.search(f">(.*?)\.\.\.", line) 
            if match: 
                tile_id = match.group(1) #0	46aa, >WFG38034.1_10... *, captures 'WFG38034.1_10'
                current_cluster.append(tile_id)
        
        if current_cluster:
            clusters.append(current_cluster)
        
# ------- STEP3: DETECT CLUSTERS WITH MIXED STRAINS/ACCESSIONS -------

cluster_analysis = []

for i, cluster in enumerate(clusters):
    strains = set()
    accessions = set() 
    hosts = set()
    countries = set()

    for tile in cluster: 
        meta = tile_to_metadata.get(tile)
        if not meta:
            continue
        strains.add(meta["strain"])
        accessions.add(meta["accession"])
        hosts.add(meta["host"])
        countries.add(meta["country"])

    #classify cluster type
    if len(accessions) == 1:
        category = "Same protein"
    elif len(strains) == 1:
        category = "Different proteins (same strain)"
    else: 
        category = "Different strains"
    
    tile_descriptions = [
        f"{tile} (tile {tile_to_metadata[tile]['tile_number']})"
        for tile in cluster if tile in tile_to_metadata
    ]

    cluster_analysis.append({
        "cluster_id": f"Cluster_{i}",
        "num_tiles": len(cluster),
        "cluster_type": category,
        "strains": "; ".join(sorted(strains)),
        "accessions": "; ".join(sorted(accessions)),
        "hosts": "; ".join(sorted(hosts)),
        "countries": "; ".join(sorted(countries)),
        "tiles": "; ".join(cluster),
        "protein_names": "; ".join(
            sorted(set(tile_to_metadata[t]['protein_name'] for t in cluster if t in tile_to_metadata))
        )
    })

output_file = "cdhit_cluster_analysis.csv"

with open(output_file, "w", newline="") as f:
    fieldnames = ["cluster_id", "num_tiles", "cluster_type", "strains", "accessions", "protein_names", "hosts", "countries", "tiles"]
    writer = csv.DictWriter(f, fieldnames=fieldnames)
    writer.writeheader()
    for row in cluster_analysis:
        writer.writerow(row)

print(f" Cluster classification complete, output saved to: {output_file}")